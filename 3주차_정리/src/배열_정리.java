/*
 *  데이터 저장 : 변수 => 데이터형
 *  					| 정수 => byte/int/long
 *  					| 실수 => double 
 *  					| 논리 => boolean
 *  					| 문자 => char
 *  					| 문자열 => String
 *  데이터 가공 : 연산자 / 제어문
 *  		1) 연산자
 *  			=> 단항연산자 
 *  				증감연산자( ++ , -- ) => 한 개 증가, 감소
 *  				부정연산자 (!) => 예약일이 아닌 경우
 *  				형변환연산자 => 클래스형변환
 *  							--------
 *  							 => 상속 / 포함 / 라이브러리
 *  				=> UPcasting / DownCasting
 *  				   ---------   -----------
 *  					|자동형변환		 |강제형변환
 *  					long a=10;	  int a=10.5;
 *  						  ---int	    ----double
 *  						  =>10L				
 *  					연산 => 같은 데이터형끼리만 연산처리
 *  					10.5+10
 *  					---  --
 *  						 =>10.0 으로 형변환
 *  					=================> 결과값 20.5
 *  					*** char는 연산이 된 경우 자동으로 int로 변환
 *  			=> 이항연산자
 *  				산술연산자 : +,-,*,/,%
 *  				=> 산술규칙
 *  					1) 자동으로 같은 데이터형으로 변환 후 처리
 *  					2) int 이하 => char,short,byte => 연산 후 int로  처리
 *  					+ : 산술(더하기) / 문자열 결합용
 *  					/ : 나누기
 *  						정수/정수 = 정수 , 0으로 나눌수 없다
 *  					% : 실제 결과값은 왼쪽 부호를 따라간다
 *  				비교연산자 : ==, !=, <, >, <=, >=
 *  						 -------
 *  				논리연산자 : &&, || => 다중조건 (if문 안에서 사용)
 *  				대입연산자 : =, +=, -=
 *  							-------증가,감소(여러개)
 *  							a+=10 ==> a에 10을 더한 값을 저장
 *  			=> 삼항연산자 => 웹(JSP => HTML + Java)
 *  						  =====================
 *  							| HTML + Java => 분리
 *  							  ==================MVC
 *  				조건?값1:값2
 *  				---
 *  				true => 값1
 *  				false => 값2
 *  				=> 이전페이지 / 다음페이지
 *  				=> 웹 핵심 : 사용자 편리성
 *  						   ---------
 *  							1. 화면 UI => 이미지 12~15
 *  							   게시물 : 15~20
 *  		2) 제어문	
 *  			1. 조건문
 *  				단일조건문
 *  					형식) if(조건문) - 조건문 안에는 부정연산자,논리연산자,비교연산자
 *  						{
 *  							조건이 true 일 때 처리
 *  						}
 *  						=> 독립문장 => 속도가 느리다는 단점이 있다
 *  				선택조건문 >> 조건이 true / false 일 때 나눠서 처리 / 웹에서 가장 많이 사용: 결과값을 무조건 전송해줘야 하기 때문 / 로그인=>성공/실패
 *  					형식) if(조건문)
 *  						{
 *  							조건이 true 일 때 처리
 *  							로그인시 => 브라우저 전송 => main으로 이동
 *  						}
 *  						else
 *  						{
 *  							조건이 false 일 때 처리
 *  							로그인 실패시 => 다시 로그인, 회원가입 이동
 *  						}
 *  							*** 자바에 사용자 요청 처리
 *  									 =========== 메소드
 *  								처리결과를 브라우저로 전송 ==> 리턴형은 항상 존재
 *  			2. 반복문
 *  				for: 반복횟수가 지정되어있을 때 => 화면 출력할 때 for-each
 *  								|조건식이 flase일 때 종료
 *  					for(초기값;조건식;증감식)
 *  						{
 *  							반복수행문장
 *  						}
 *  					for(데이터형 변수:배열(컬렉션)
 *  								  ----------데이터 여러개가 저장
 *  							=> 저장된 데이터를 1개씩 읽어온다
 *  				=> 일차 for / 이차 for
 *  					for(초기값;조건식;증감식)
 *  						{
 *  							for(초기값;조건식;증감식)
 *  								{
 *  						
 *  								}
 *  						}
 *  				while :무한루프 , 반복횟수를 모를때 (파일읽기, 데이터베이스 연결)
 *  					 초기값
 *  				 	 while(조건식)
 *  						{
 *  							반복문장
 *  							증감식
 *  						}	
 *  			3. 반복제어문
 *  				break : 반복문을 종료할 때 => 프로그램을 종료 system.exit(0)
 *  															   --- 0은 정상종료/0이 아닌 경우 비정상 종료
 *  				system.out.println() => 정상출력
 *  				system.err.println() => 에러출력 > 빨간색
 *  		------------------------------------------------------------------------------------------
 *  		배열 : 데이터를 묶어서 사용
 *  		문자열 : 문자 여러개를 사용하는 부분
 *  		메소드 : 관련된 명령문을 묶어 사용
 *  		---------------------------+ 클래스 => 패키지 => 라이브러리
 *  
 *  		--변수명이 여러개 있는 경우 => 제어가 어렵다 => 제어문 사용에 문제발생 => 반복문사용(데이터)
 *  		1. 배열 : 데이터를 묶어서 사용
 *  				=> 관련된 데이터  
 *  				=> 한 개의 이름으로 여러 개 제어
 *  				=> 변수 여러개
 *  				=> 클래스 여러개 (한 개의 이름으로 제어 => 인터페이스)
 *  													|7장
 *  		예)
 *  			Board => 글쓰기, 목록, 상세보기, 수정, 찾기, 삭제
 *  			----클래스 ------------------------------메소드
 *  			Food => 목록(페이지), 상세보기, 찜하기, 예약, 좋아요
 *  							   | 위치 => map
 *  			Recipe => 목록, 쉐프정보, 조리방법, 구독, 검색
 *  			Seoul => 목록, 여행코스, 인근맛집, 숙소, 렌트카대여
 *  
 *  			배열(일차배열)
 *  			= 선언
 *  				데이터형[] 배열명; => 권장사항
 *  				데이터형 배열명[]; => C언어 호환
 *  			    	예) > 무한정 설정 가능
 *  				문자열 배열				정수형 배열
 *  					String[] arr;  int[] arr;
 *  			= 초기값 설정
 *  				명시적 초기화
 *  					int[] arr={1,2,3,4,5};
 *  				기본값 초기화
 *  					int[] arr=new int[5]; => 0으로 초기화
 *  							 ----
 *  							String => null / int => 0 / double => 0.0 boolean => false
 *  				선언 후 초기화
 *  					int []arr;
 *  					arr=new int[]{1,2,3,4,5}
 *  				** 연속적으로 메모리 저장
 *  				   ---------------- =메모리 크기 동일 => 같은 데이터형만 모아 관리
 *  				** 한 번 설정하면 변경 불가능 => 고정적 => 가변형 배열 등장(클래스(collection))	
 *  													ArrayList / Map / Set
 *  				** int []arr=new int[5];
 *  								arr[0] [1] [2] [3] [4]----인데스/첨자 => 데이터구분자
 *  				-----arr------   ------------------------
 *  					0X100			0   0   0   0   0
 *  				--------------	 |-----------------------
 *  							   0X100	
 *  									** 인덱스 0부터 순차적 => 반복문 사용이 좋다
 *  									 arr[0] => 일반변수와 동일
 *  										=> 값 변경/ 값 읽기
 *  										=> 갯수 : 배열명.length
 *  										=> 배열의 크기를 벗어나면 오류발생( for;i<배열명.length;)	
 *  																	   ---
 *  			= 데이터 수정 / 데이터 출력
 *  				1) 값 변경 / 초기 값
 *  					일반for문을 이용
 *  					 => 인덱스 이용
 *  				2) 값 읽기
 *  					for-each 주로 사용
 *  					 => 실제 배열에 저장된 값 읽기
 *  
 *  		2.메소드 : 한 개의 기능을 만들어서 재사용할 수 있게
 *  			1. 종류
 *  				= 사용자 정의 메소드
 *     				 1) 특정 작업을 사기 위한 명령문의 집합
 *  					-------			----- >;
 *  					 > 기능처리			int a=10; => 명령문
 *  					 > 한 가지 일만 처리하게 ==> 재사용 / 유지보수(수정)를 위해
 *  												  --------------
 *  													수정 : 오버라이딩
 *  													추가 : 오버로딩
 *  					** 형상관리 : GIT (공통 프로젝트)
 *  						=> 협업(면접필수)
 *  				 2) 메소드 사용 목적
 *  					1. 반복되는 기능을 제거
 *  					2. 코드관리가 쉽다 => 기능별로 나눠서 처리
 *  						= 입력 / 처리 / 출력
 *  					3. 소스를 간결하게 제작	
 *  					4. 다른 클래스와 연결 
 *  					5. 재사용
 *  
 *  				 3) 메소드의 종류		
 *  					공통메소드 : 자동으로 메모리에 저장
 *  					 Static
 *  					인스턴스 메소드 : 메모리마다 따로 저장
 *  					 new 사용해서 저장
 *  					추상메소드 : 선언 => 필요시 구현  ----------> 설계단에 주로 사용
 *  
 *  				 4) 메소드 만드는 방법
 *  					리턴형 : 사용자 요청시 처리된 결과값
 *  						   -------------------
 *  						결과값이 있는 경우 => 기본형,   배열,      클래스
 *  										----int ---int[] ----string
 *  						결과값이 없는 경우 => 메소드 자체 처리 void  : system.out.println();
 *  											** 결과값은 무조건 1개만 사용가능
 *  					메소드명 : 변수식별자
 *  							 알파벳,한글로 시작/ 알파벳은 대소문자 구분/ 숫자는 뒤에 사용가능/ 공백 사용불가/ 키워드 사용불가/ _$ 사용가능
 *  							 소문자로 시작하는 것이 기본/ 중복 메소드명은 사용하지 않는것이 좋다/ 7~15자 사이/ 의미부여
 *  					매개변수 : 여러개 사용 가능> 가급적 3개 이상이면 클래스, 배열 사용/ 사용자값/ 없는 경우도 있다
 *																						Math.random(), trim()
 *  								로그인
 *  								=> 로그인(String id,String pwd)
 *  									  --------------------
 *  								회원가입(아이디,비밀번호,이름,이메일,성별,생년월일,주소,전화번호..)
 *  								=> 회원가입(Member m)
 *  								변수 => 읽기 /쓰기
 *  								  getxxx() 	setxxx()
 *  								class Member
 *  								{
 *  									String 아이디,비밀번호,이름,이메일,성별,생년월일,주소,전화번호..
 *									}
 *  					[접근지정어][옵션]리턴형 메소드명 (매개변수)
 *  					{
 *  
 *  					}			
 *  				5) return 사용법
 *  				  -------- 메소드 종료의미
 *  				 	리턴형이 있는 경우엔 반드시 return 값;
 *  					리턴형이 없는 경우엔 return 생략
 *  					 => 컴파일러에 의해 자동추가
 *  					*** 반드시 리턴을 사용해야 한다
 *  					*** return문은 항상 마지막에 코딩하는 것은 아니다 => 중간에 처리가능 / 조건마다 사용가능
 *  					예)
 *  					 void login()
 *  					 { 
 *  					   if(로그인이 안 된 경우)
 *  							return
 *  					   else
 *  							return   => 반복문 break;
 *  					 }
 *  
 *  				6) 메소드
 *  					1. 동작과정 (행위)
 *  					2. 화면출력 : 리턴형
 *  					3. 사용자 유도 : 매개변수
 *  
 *  				7) 메소드 유형
 *  				------------------------------------
 *  						리턴형			매개변수
 *  				------------------------------------
 *  						  0				  0
 *  				------------------------------------
 *  						  0				  X
 *  				------------------------------------
 *  						  X				  0
 *  						void=> 데이터베이스:insert/update/delete
 *  							   출력 => 규정된 상태는 아니다
 *  				------------------------------------
 *  				 		  X				  X
 *  						void
 *  				------------------------------------
 *  
 *  				메소드유형
 *  				 로그인 ======> boolean isLogin(String id,String pwd)
 *  				 목록======> String[] movieList()
 *  				 상세보기======> String movieDetail(int movieno)
 *  					=> 리턴형/매개변수가 없는 경우는 빈도가 거의 없다
 *  
 *  				= 라이브러리에 제공하는 메소드(API) => 이후 API 이용
 *  				mvnrepository.com
 *  
 *  			=> 객체지향 프로그램 :Actor
 *  			=> 클래스의 구성요소
 *  				= 변수
 *  					변수의 종류
 *  				= 생성자
 *  					변수의 초기화 => 초기화블럭
 *  				= 메소드
 *  					메소드 종류
 *  		
 *  				
 */	
public class 배열_정리 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
