/*
 *   1. 변수 = 1개만 저장 가능한 공간, 변경이 가능하다
 *   		=> 1. 메모리 저장  2. 값 읽기  3. 수정 가능
 *     ----
 *     1) 지역변수 : 메소드 안에서 선언되는 변수
 *     2) 멤버변수
 *     3) 공유변수
 *     -----------------------------------
 *     => 변수를 저장하기 위해서 반드시 필요한 내용
 *     	  ------------------------------
 *     	  메모리 크기 결정 / 클래스 (JVM에서 크기를 모른다)
 *     						  ----------------
 *     						  | new => 새로운 메모리 생성
 *     	  기본형
 *     	  ----
 *     	  정수: byte(1), int(4), long(8)
 *           -128~127 -21억4천~21억4천
 *     	**실수 : double(8) > 소수점 15자리이상
 *     	  문자 : char(2) > 0~65535
 *     	**논리 : boolean(1) > true / false
 *        ------------------------
 *        참조형 : 배열 / 클래스(***string, integer, arraylist)
 *        		오라클 : connection / statement / resultset
 *        *** 변경이 되는 값
 *        	  누적 / 루프
 *        	  *** 가독성
 *        		  i/j => a/b m/n
 *        	  입력값
 *        	  난수값	
 *    메모리 저장
 *    ------------------------------------
 *   methodArea : method / static(공유변수)
 *    ------------------------------------
 *   stack : 메모리 자체에서 관리 => 지역변수
 *   		 {}이 종료가 된 경우 사라진다
 *    ------------------------------------
 *    Heap : 실제 데이터 공간 : 클래스, 배열
 *    		 자동으로 해제되지 않는다=> 개발자 처리
 *    		 new / delete => 가비지컬렉션
 *    						 자동 메모리 회수
 *    		 => 메모리 저장
 *    			--------확인 int malloc()
 *    					해제 free() => 없어짐
 *    ------------------------------------
 *    
 *    ==> 사용자 요청에 따른 데이터 처리
 *    1) 연산자
 *    		단항연산자 (++, --, !, (type))
 *    							-------강제 형변환 > 클래스형변환
 *    											  클래스의 크기
 *    											 is-a, has-a
 *    													|포함 클래스
 *    													|join
 *    						-- true/ false만 사용
 *    							true>false /false>true
 *    			++, -- : 반복문 주로 사용
 *    			a++,  ++a
 *    			---   ---
 *    		다른연산먼저  증가먼저
 *    		 추후 증가  추후 연산처리
 *    
 *    		이항연산자 (+, -, *, /, %, > ==, !=, <, >, <=, >=, &&, || )
 *    			1. 모든 연산자는 같은 데이터형만 연산 가능하다
 *    				10+10.5 = 20.5
 *    				--10.5 (자동형변환)
 *    				+ : 산술연산 , 문자열 결합
 *    							--------
 *    							+ concat("aaa") 
 *    			 * 산술규칙
 *     				= 같은 데이터형만 연산 가능
 *     				=int 이하 연산자 연산 결과값은 int
 *     			 / : 0 으로 나눌 수 없다. 정수/정수=정수
 *     			 % : 남는 부호는 왼쪽 부호
 *     					-5%2 = -1 / 5%-2 = 1
 *              -------------------------------------------------------
 *              ==, !=, <, >, <=, >=,
 *              ====> boolean : 조건문이나 반복문의 조건에서 주로 사용
 *              ====> 숫자, boolean : ==, !=
 *              
 *              && (직렬연산자 =:> 양쪽의 조건이 참일때)
 *              || (병렬연산자 => 한 쪽의 조건이 참일 때 참)
 *              *** &&연산자 => 범위,기간을 포함 
 *              	앞의 조건이 거짓일 때 뒤의 조건은 수행하지 않는다 > 효울적인 연산
 *              	||연산자=> 범위 밖
 *              	앞의 조건이 참일 때 뒤의 조건은 수행하지 않는다 
 *    				=, +=, -=
 *    		 	대입연산자
 *    			+= : 여러개 증가
 *    					int a=10;
 *    					a++ >11
 *    					a+=5 >15    a=a+5
 *    			-= : 여러개 감소
 *    
 *   		삼항연산자 (?:)
 *   			(조건)?값1:값2
 *   			참 -> 값1
 *   			거짓 -> 값2    =>if~else
 *   
 *   
 *    2) 제어문
 *    		if, if~else
 *    		조건문
 *       	 =>if(조건문)
 *       	{
 *       		조건이 참일 때 수행
 *       	}
 *      	 =>if(조건문)
 *      	{
 *       		조건이 참일 때 수행
 *      	}
 *      	 else
 *      	{
 *      		조건이 거짓일 때 수행
 *      	} 
 *    		for , while
 *    		 =>for(초기식;조건식;증감식)
 *    		{
 *    			실행문장
 *    		}
 *    		 =>while
 *    		 초기식
 *    		 while(조건식)
 *    		{
 *    		    실행문장
 *     			증감식
 *    		}
 *    		  while(true)
 *    		{
 *    		    실행문장
 *    			if(조건)
 *    			{
 *    				break > 종료
 *    			}
 *    		}
 *    
 *    		break
 *    -------- 묶어서 처리 > 메소드 => 중복제거
 *    1. 입력
 *    2. 처리 => 세분화
 *    3. 출력
 */
 import java.util.Scanner;
public class 자바1_3_정리 {
	static int userInput(String s)
	{
		Scanner scan= new Scanner(System.in);
		System.out.println(s+"입력:");
		return scan.nextInt();
	}
	// 멤버변수 => 자동 초기화 int a; => a=0
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// 지역변수 => 초기화 안됨 => int a; -- 오류
	/*	Scanner scan=new Scanner(System.in);
		System.out.println("년도 입력:");
		int yy=scan.nextInt();
		System.out.println("월 입력:");
		int mm=scan.nextInt();
		System.out.println("일 입력:");
		int dd=scan.nextInt(); */
		int yy=userInput("년");
		int mm=userInput("월");
		int dd=userInput("일");
		System.out.println(yy+"년"+mm+"월"+dd+"일");
	}

}
