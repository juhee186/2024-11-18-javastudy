/*
 * 	1. 객체지향 프로그램
 * 		기능별 분리해서 클래스와 클래스간의 연결해서 처리
 * 		=> 조립식					 -----------매소드
 * 		예) 컴퓨터
 * 		CPU/하드디스크/모니터/메모리...
 * 		-------------------------클래스
 * 		메인보드 조립
 * 		---------
 *  => 클래스
 *  	1) 사용자 정의 데이터형 => 데이터형 클래스
 *  						 -----------
 *  						 => 관련된 데이터를 모아서 관리	
 *  						 => ~VO, ~DTO
 *  	2) 한 개의 기능 (메소드) => 액션클래스
 *  						 => 데이터를 활용하는 메소드
 *  						 => ~DAO, ~Model
 *	class class name
 *	{
 *		구성요소
 *		----------------------
 *	  ** 변수 : 멤버변수, 공유변수 => 다른 클래스에서 사용가능
 *			기본형(정수,실수,논리,문자,문자열,배열)
 *		----------------------
 *		 생성자 : 멤버변수에 초기화, 시작과 동시에 처리기능
 *				=> 자동로그인, 데이터베이스 연결
 *				=> 서버연결
 *				=> 메모리 저장시 호출
 *		----------------------
 *	  ** 기능 설계 => 메소드
 *		----------------------
 *	}
 *		메소드
 *		=> 정의 :  한 개의 기능을 수행하는 명령문의 집합
 *				  -------------
 *				  => 조립 : process()
 *				  => main에서 코딩을 하지않는다
 *					 ->process()만 호출
 *				  => 로그인 처리 / 회원가입-수정-탈퇴..
 *				  => 목록 / 글쓰기 / 상세보기 / 수정 / 삭제 / 검색
 *		=> 1. 반복적인 문장이 있는 경우 (반복제거)
 *			예) 오라클연결
 *			   -------
 *				>목록읽기
 *			   오라클 연결 ---
 *				목록읽기
 *			   오라클 닫기 --- 메소드
 *			  ---------
 *				>글쓰기
 *			  오라클 연결
 *				글쓰기
 *			  오라클 닫기
 *			  ---------
 *			   >상세보기
 *			  오라클 연결
 *			   상세보기
 *			  오라클 닫기
 *			 ----------
 *		=>	2. 명령문을 기능별 분리 => 단락을 나눠서 처리
 *			 = 가독성 : 보기가 편리하다 (소스가 간결하다)
 *			 = 유지보수 : 수정이 용이하다 
 *			 = 재사용 : 어떤 클래스에서든 필요시마다 사용 가능하다
 *				Math.random() sysout()
 *			 = 최적화 
 *	   -----------------------------------------------
 *		데이터저장 => 저장된 데이터 가공 ===> 가공된 데이터 출력
 *		   |			|
 *		  변수		연산자/제어문
 *		  배열		---------
 *					묶어서 처리 => 메소드
 *	   ------------------------------------------------
 *		메소드 => 사용할 때(호출)
 *				호출이 되면 메소드 처음부터 수행 =>다시 호출된 위치로 복귀
 *
 *		메소드 구성요소
 *		1) 결과값 : 사용자 요청에 따른 결과값 추출 (리턴형)
 *			Math.random() => 난수추출
 *		2) 사용자 요청값 : 매개변수 
 *			예) 로그인 => 아이디,비밀번호
 *				+ => 정수,정수
 *			   아이디 중복체크 => 아이디
 *		3) 메소드명 : 기능에 맞게 이름 부여
 *				=> + - ..
 *				=> 변수 식별자와 동일
 *					1) 알파벳, 한글 => 알파벳은 대소문자 구분
 *					2) 숫자 사용 가능 => 앞에 사용 불가
 *					3) 키워드 사용 불가
 *					4) 특수문자 사용가능 $, _
 *					5) 공백 사용 불가
 *					6) 문법사항은 아니나 소문자시작
 *		메소드 형식 : 선업부 / 구현부
 *		[접근지정어] [옵션] 리턴형 메소드명(매개변수)  // 선언부
 *		--------  ---- ----		  -------
 *									여러개 사용 가능
 *					|  |>기본형|배열|클래스 => 결과값은 반드시 1개만 사용가능
 *							  --------- 결과값이 여러개일 때 사용
 *				static | final | abstract
 *				|자동메모리저장	|종단		|선언만	
 *
 *		public|private|protected|default
 *		  |		  | 		| 		 |
 *	   모든클래스 자신의클래스  같은폴더|상속  같은폴더
 *		{
 *			구현부
 *			return 값
 *		}
 *
 *	--------------------------------------
 *		리턴형			매개변수
 *	--------------------------------------
 *	1)	 0 				  0
 *	   string		substring(int begin)
 *		 |					|
 *		리턴형			 매개변수
 *  --------------------------------------
 *  2)	 0  			  x
 *     double 			random()
 *     ------				  --
 *  --------------------------------------
 *  3)	 x				  0
 *      void	   println(String s)
 *      ----결과값x
 *  --------------------------------------
 *  4)	 x			 	  x		==> 사용 빈도는 거의 없다
 *  	void system.out.println()
 *  --------------------------------------
 *  3),4) => 메소드 자체에서 출력
 *  
 *  => 결과값을 받아서 출력
 *  => 메소드 안에서 출력
 *  => return => void는 생략이 가능 / 리턴은 메소드 종료
 */
/*
 * 	자동 생성
 *  -------
 *  import java.lang.*; >> string,system..
 *  => 메소드 : void일 경우에 생략을 하면 자동 첨부
 *  
 *  메소드는 반드시 호출해야 사용가능하다
 *  void display()
 *  int display()
 *  int display(int a)
 *  void display(int a,int b)
 *  
 *  호출하는 방법
 *  public static void main(String []arg)
 *  {
 *   	display();
 *   
 *  	int a=display();
 *  
 *  	int a=display(10);
 *  
 *  	display(10,20);
 *  }
 */
public class 메소드_1 {
		//4) 리턴형, 매개변수 없는 상태 void system.out.println()
		// > 메소드안에서 구구단 출력
	static void gugudan()
	{
		// void >> 메소드 안에서 출력하겠다  => 전체 처리
		for(int i=1;i<=9;i++) //줄수
		{
			for(int j=2;j<=9;j++) //단
			{
				System.out.printf("%2d * %2d = %2d\t".formatted(j,i,j*i));
			}
			System.out.println();
		}
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		gugudan(); // 메소드 호출
		
		

	}

}
