/*
 * 	1. 주의점
 * 		1) static 메소드안에서 인스턴스변수, 인스턴스 메소드 사용 불가 => 사용시 객체생성 후 사용가능
 * 		2) static 메소드, static 변수는 this 사용 불가
 * 		3) static 블록은 static 변수만 초기화 가능
 * 		4) 인스턴스 메소드에서는 인스턴스변수, static 사용 가능
 * 		5) 초기화 => 생성자 이용
 * 				   -----this , 인스턴스 , static 사용 가능
 * 
 * 	2. 접근지정어 => 객체 사용 범위 지정
 * 
 * 	=> 멤버변수 : 다른 클래스에서 사용 가능
 * 		[접근지정어] 데이터형 변수명
 * 		--------
 * 		[접근지정어] [제어어] 리턴형 메소드명 (매개변수)
 * 		--------
 * 	=> 지역변수에는 접근 지정어 사용불가
 * 	  ------- 메소드안에서 사용
 * 	  => final만 사용 => 상수/변수 여부구분용
 * 클래스, 멤버변수, 메소드 => 접근제어
 * ---------------------------------------------------------
 * 접근지정어		  적용대상			접근가능대상		접근불가대상
 * ---------------------------------------------------------
 * public    클래스, 필드(멤버변수)    모든 대상				x
 * 			  생성자, 메소드
 * ---------------------------------------------------------
 * protected  멤버변수,생성자      같은 폴더(패키지)	   다른 폴더(패키지)
 * 				 메소드		   상속받은 클래스
 * 								> 다른폴더
 * ---------------------------------------------------------
 * private	  멤버변수,생성자     자신의 클래스 내부		 클래스 외부
 * 				 메소드
 * ---------------------------------------------------------
 * default	 클래스, 멤버변수	   같은 폴더에서만      다른 폴더(패키지)
 * 			 생성자, 메소드
 * ---------------------------------------------------------
 * => 크기
 * 	private < default < protected < public
 * ----------------------------------------
 * 	 오버라이딩 => 접근지정어 처리
 * 	  => 접근지정어는 확장만 가능(축소x)
 * *** 가장 많이사용
 * 		멤버변수 => 은닉화 private
 * 		생성자, 클래스, 메소드 => 모든 클래스 연결 public
 * 		----------------다른 클래스에서 사용
 * 						--------다른 폴더 존재할 수 있다
 * 제어어
 * 	=> static | abstract | final
 * 		static : 공통적인 => 공통으로 사용되는 메소드/변수
 * 		final : 마지막 => 변수(상수), 메소드(종단), 클래스(종단)
 * 								 -------------------있는 그대로 사용
 * 											String, Math, Scanner,system 
 * 		abstract : 추상적인 => 공통기능 => 선언
 * 					=> 추상클래스, 인터페이스 =>구현x
 * 					   ---------------미완성 클래스
 * 					   -- 서로 다른 클래스 연결해서 사용
 * 					   -- 클래스 여러개 제어
 * 					   -- 결합성을 낮출 수있다
 * 		--------클래스, 메소드에서만 사용 가능
 * 		기능 설계
 * 		------
 * 		데이터베이스 : 데이터를 저장하는 장소
 * 			= 메모리 : 변수,배열,클래스 => 휘발성
 * 			= 파일 : 여러개 동시 처리 어려움
 * 			= 오라클 : 여러개 데이터를 연결해서 사용
 * 		게시판 ===> CRUD
 * 				insert select update delete
 * 				create read update delete => SQL
 * 				-----  ----
 * 				 생성		목록
 * 		----글쓰기, 목록, 상세보기, 수정, 삭제, 검색..
 * 
 * 		클래스 : public / default => public : 모든 클래스 사용
 * 		메소드 : public / default / private / protected
 * 				=> 메소드의 역할 : 다른 클래스 통신(메세지) => public	
 * 		생성자 : public			
 * 		멤버변수 : private(데이터보호) =>은닉화
 * 				 가정=> 메모리에서 보이지 않는다
 * 				  => 어떻게 통신
 * 				  => 변수  : 쓰기(메모리 저장), 읽기(메모리 가져오기)
 * 							=> 매소드 처리 : getter / setter
 * 		지역변수 : 접근지정어 필요없다 (메소드 안에서만 사용 가능)
 * 				=> 상수(final)
 * 
 * 		*** 객체지향의 3대 특성(권장)
 * 			1. 캡슐화 : 외부로부터 데이터 보호(데이터 손상 : 개인정보 등) >> 손상방지(데이터 감추기) : 필요한 경우 메소드 이용해서 사용이 가능하게 만든다
 * 			2. 상속 : 재사용
 * 			3. 다형성 : 기능 추가-변경
 * 				   오버로딩---- ----오버라이딩
 * 			4. 추상화 : 중복제거 (공통적인 내용 모아서 관리)
 * 						=> 공통모듈
 */
class member
{
	private String id; // 클래스안에서만
	protected String pwd; //같은폴더상
	int age; // 같은 폴더상
	public String name;//모든클래스
}
public class 접근지정어_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		member m=new member();
		

	}

}
