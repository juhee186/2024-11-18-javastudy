package com.sist.main;
/*
 *	 상속	
 * 	=> 기존의 클래스를 재사용 (메소드 변경, 메소드 추가)
 * 	=> extends
 * 	=> 단일 상속
 * 	=> 객체지향
 * 	   재사용 / 데이터 손실 방지 / 변경용이-추가 가능
 * 	   ----------------------------------
 * 	   |상속		|캡슐화		 |다형성(오버라이딩,오버로딩)
 * 	  =>제약조건多
 * 	  =>소스를 볼수없다=>분석의어려움(가독성이 낮다)
 * 	  =>상위클래스=>하위클래스 메모리할당=>실행속도가 느리다
 * 	  =>상속>보완:인터페이스(구현)**
 * 
 * 	  1) 장점
 * 		 => 중복을 제거
 * 		 => 코드가 간결하다
 * 		 => 메소드 기능을 칠요시마다 변경 가능
 * 		
 *  	 => 상위 클래스
 *  		: 공통적인 기능
 *  		영화관 CGV 롯데시네마 메가박스  ==> 공통기능: 포스터 출력/예약/극장소개/회원가입/로그인처리..
 *  		상속 받은 내용을 변경 => 오버라이딩
 *  		게시판 ==> 자유게시판 / 댓글게시판(댓글 추가) / 갤러리게시판(이미지 업로드) / 묻고답하기(관리자/사용자)..
 *  	 => 하위 클래스
 *  	 => 상속을 받으면 데이터형이 두 새가 생긴다
 *  		동물 ==> 개 / 소 / 말
 *  		개 a= new 개() / 동물 b= new 개()
 *  		상속을 내리는 클래스 > 상속 받는 클래스
 *  		int long double => 데이터형
 *  		클래스 => 사용자 정의 데이터형
 *  				--------------
 *  		메소드 : 사용자정의 메소드
 *  			  -------------
 *  
 *  		==> 변경가능(오버라이딩)
 *  		오버라이딩 (메소드 재정의) => 덮어쓴다
 *  							  ------ 구조가 동일해야한다
 *  		1) 상속이 존재 => 클래스에서 상속없이 재정의(오버라이딩) 가능
 *  						=> 익명의 클래스
 *  		2) 메소드가 동일
 *  		3) 매개변수 동일
 *  		4) 리턴형 동일
 *  		5) 접근지정어 확장만 가능
 *  		private < default < protected < public
 *  		=> 메소드는 다른 클래스와 연결시 사용
 *  		   ------------------------ 가급적이면 public 사용
 *  		** 클래스 / 생성자 / 메소드 => public
 *  		** 멤버변수 => private (데이터 보호)
 *  			=> 필요시 사용 가능 => getter / setter
 *  		** 윈도우 => 보안(x) => button ,textfield => default
 *  		
 *  		상위 클래스 : 상속을 내리는 클래스
 *  					=> 하위 클래스를 제어할 권한이 없다
 *  		하위 클래스 : 자신 + 상위 클래스 제어할 수 있다
 *  				 ----	---------------
 *  				 this		super
 *  			 (자신의 객체)	 (상위 클래스 객체)
 *  		=> 생성자 : this()   =>super()
 *  
 *  		** A a= new B();
 *  		  ---	   ---
 *  		상위클래스	 하위클래스
 *  		: A가 가지고 있는 변수, B가 가지고 있는 메소드를 가지고 온다
 *  
 *  		변수 : 클래스형
 *  		메소드 : 생성자
 *  
 *  		---------------------------------
 *  		상위클래스를 이용
 *  		 | 관련된 클래스를 여러개 묶어 사용
 *  		 | 한 개의 객체명으로 처리 가능
 *  		 | 변수가 많거나 객체가 많으면 => 제어가 어려움
 *  		   -------------------
 *  			 | 한 개의 이름으로 제어하는 방법
 *  			   --------------- : 상위클래 / 인터페이스(스프링의 기반)
 *  											|클래스의 일종
 *  
 *  		=> 상속시 예외조건 / 접근지정어
 *  		  -----------	-------
 *  						 | private : 접근이 불가능
 *  							=> getter/setter 이용
 *  		  | static : 공유데이터 => 사용은 가능
 *  		  | 생성자 
 *  		  | 초기화블럭
 *  	
 *  		=> 상속이 있는 경우
 *  		   생성자 => 매개변수가 있다면
 */
// 1.상위 클래스 => 메모리할당
class A
{	public A() {
	
	}
	public A(String s) {
		System.out.println(s);
	}
}
class B extends A {
	public B(String s) {
		super(s); // 상위 클래스 메모리 할당먼저
	}
	public B() {
		super(); //default 일 경우 생략 => 컴파일러가 자동 추가
	} //super() => 상위클래스 생성자 호출
}
public class 상속_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
